#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <random>

#include "myrand.h"
#include "PES.h"
#include "PES_analysis.h"
#include "moldyn.h"
#include "TISE1D_sol.h"

int main() {

	setbuf(stdout, NULL);

	int react[5], vJ[2];
	long int i;
	double Rmp[2] = { 6.547100242E-01, 9.079290792E-01};
	double gv[] = { 0.270026914, 0.284506992, 0.313333978, 0.356245746, 0.412859527, 0.482683558, 0.565131593, 0.659538029, 0.765175019, 0.881268962, 1.00701538, 1.141593555, 1.284178674, 1.433952126, 1.590110056, 1.751869561, 1.918473655, 2.089194118, 2.263332986, 2.440223787, 2.619230307, 2.799746584, 2.981194308, 3.16302133, 3.344699684 };
	double gv1[] = { 0.778487317, 0.792270669, 0.819708296, 0.860546381, 0.914414056, 0.980834561, 1.059239384, 1.148982883, 1.249358538, 1.359614448, 1.47896833, 1.606620915, 1.741767853, 1.883609873, 2.031360851, 2.184254501, 2.341548344, 2.502528048, 2.666508418, 2.832835136, 3.000883766, 3.170059506, 3.339795081, 3.50954814, 3.678798152, 3.847041578 };
	double gv2[] = { 1.258754594, 1.271834525, 1.297869155, 1.336612104, 1.387703666, 1.45068134, 1.524993228, 1.610012785, 1.705054073, 1.809387261, 1.922252387, 2.042873245, 2.170468297, 2.304260842, 2.443486579, 2.587400051, 2.735278992, 2.886426923, 3.040175392, 3.195883593, 3.35293763, 3.510748902, 3.668750134, 3.826391781, 3.983134593, 4.138442168, 4.291769179 };
	double gv3[] = { 1.710463457, 1.722834017, 1.747453745, 1.784083952, 1.832375966, 1.891882042, 1.962067517, 2.042325933, 2.131992928, 2.23036198, 2.33669706, 2.450246015, 2.570251612, 2.695960336, 2.82663008, 2.9615356, 3.099972359, 3.241258264, 3.384734656, 3.529764699, 3.67573152, 3.822033127, 3.968077197, 4.113271408, 4.257012405, 4.398666821, 4.537545001, 4.672855115, 4.803619715};
	double gv4[] = { 2.133562078, 2.145221777, 2.168423628, 2.202936753, 2.248423763, 2.304451422, 2.370503044, 2.44599226, 2.530277025, 2.622673759, 2.722470236, 2.828937865, 2.941341359, 3.058947415, 3.181031532, 3.306881857, 3.435802535, 3.567114074, 3.700152113, 3.834264316, 3.968804549, 4.103124814, 4.236562984, 4.368424439, 4.497953681, 4.624287461, 4.746366122, 4.862739176, 4.970937769, 5.06511742};
	double gv5[] = { 2.528207681, 2.539157387, 2.560942973, 2.593341, 2.636024618, 2.688574975, 2.750491877, 2.8212078, 2.900101285, 2.986509456, 3.079740797, 3.179085438, 3.283824832, 3.393238199, 3.506608478, 3.623225429, 3.74238588, 3.863393104, 3.985552114, 4.108162463, 4.230506224, 4.351830627, 4.471318671, 4.588041141, 4.700866713, 4.808262689, 4.9076604, 4.993038053};
	double Etr[] = { 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.6, 0.8, 1, 1.3, 1.7, 2.3, 3, 4, 6, 8 };

	char pes_file[] = "PES_data.txt";
	printf("\n%d\n\n",init_U(pes_file));
	//U_properties();

	double r[3] = {20, 20, 20}, Tv, x[6], r1[9] = { -1.239091581, 0, 0, 0, 0, 0, 0.882338509, 0, 0}, r2[9] = { -4.0000000, 0, 0, 0, 0, 0, 0.76, 0, 0 };
	double grad[9], hess[81], eigene[9], eigenh[81], red_m[9], s, B0[3];
	double *T1;
	mysrand();

	//for(x[0]=0.2; x[0]<12.99; x[0]+=0.025){
	//	r[0] = x[0];
	//	printf("%.3f\t%.10f\n", x[0], U_dist(r));
	//}
	//r[0] = 20.;

	 printf("%.2f\t%.10f\n", r[2], D_lim * 8.064877E+3);

	 calc_rovib_levels();

	 printf("%d\n", EvJ_AB.v_max);

	 for(i=0; i<EvJ_AB.v_max; i++){
	 	 for(int j=0; j<EvJ_AB.Jimax[i]; j++)
			 printf("%.2f ", EvJ_AB.Evj[i][j]* 8.064877E+3);
		 printf("\n");
		}

	 //int N_vJ;
	 //for(i=0; i<52; i++){
		// printf("J=%d ", i);
		// bound_states(0.4, 20., 1000, i, 10, 2, &N_vJ);
		// printf("N=%d\n", N_vJ);
		// if(N_vJ<=0)
		//	 break;
	 //}
		 
	
	//double* V1, x1, x2, xN, h;
	//int N, J;

	//x1 = 0.25;
	//xN = 10;
	//N = 4000;
	//h = (xN - x1) / N;
	//J = 0;

	//V1 = (double*)calloc(N+1, sizeof(double));
	////r2[6] = 20;
	//r2[0] = -30;
	//x2 = x1;
	//for(i=0; i<N+1; i++){
	//	r2[6] = x2;
	//	V1[i] = U_cart(r2) + 1./(478.450668 * 0.503915)*J*(J+1)/x2/x2; // OH 0.948204436
	//	//printf("%.6f\t%.6f\n", x2, V1[i] * 8.064877E+3);
	//	x2 += h;
	//}

	//double U=-100000., U1=-100000., U2=-100000., Emin, Elim;
	//int iElim;
	//for(i=0; i<N+1; i++){
	//	if((U1<U2)&&(U1<U))
	//		break;
	//	U2 = U1;
	//	U1 = U;
	//	U = V1[i];
	//}
	//Emin = V1[i];
	//printf("Emin_e=%f\n", Emin * 8.064877E+3);
	//U = 1e6;
	//U1 = 1e6;
	//U2 = 1e6;
	//for(i=0; i<N+1; i++){
	//	if((U1>U2)&&(U1>U))
	//		break;
	//	U2 = U1;
	//	U1 = U;
	//	U = V1[i];
	//}
	//if(i==N+1)
	//	iElim = N;
	//else
	//	iElim = i;
	//Elim = V1[iElim];
	//printf("Elim=%f\n", Elim * 8.064877E+3);

	//TISE1D_sol(V1, x1, xN, N, 10, Emin, iElim);

	//free(V1);

	//locate_min(r1, 100, 1e-3);
	//U_grad_hess_cart(r1, grad, hess);
	//freq_analysis(3, (double*)Ze, r1, hess, eigene, eigenh, red_m, B0, &s);

	//T1 = (double*)malloc(39 * sizeof(double));
	//T1[0] = 200;
	//for(i=1; i<39; i++)
	//	T1[i] = T1[i-1] + 100;
	//k_A_BC_CTST(r1, T1, 39);
	//free(T1);

//	locate_CP(r2, 3000, 1e-3, false);
//	U_grad_hess_cart(r2, grad, hess);
//	freq_analysis(3, (double*)charge, r2, hess, eigene, eigenh, red_m, B0, &s);

//	MEP_GS2(r2, 0.01, 60, true, false, 1e-5);

//#pragma omp parallel for num_threads(24) private(i) schedule(dynamic,100)
//		for ( i = 0LL; i < 24000000LL; i++)
//			U_dist(r);

//	find_Rmp_BC(0, 0.263892039, Rmp);
//	printf("%.10f\t%.10f\n", Rmp[0], Rmp[1]);

//	Tv = find_Tv_BC_par(48, 9.079290792E-01, 0, 24);
//	printf("Tv = %.10f\n", Tv);
//	P_r_b_fix(40, Rmp, 0, 1., 0.1, Tv, react);
	
//	for(i=0; i<100; i++)
//		P_r_b_fix_par(48, Rmp, 0, 0.43, 0.1, 8.003627381, react, 24);

	//printf("B_max=%.3f\n", find_b_max_A_BC_par(2000, Rmp, 0, 0.0, 0.09, 8.003627381, 24));

//	P_r_b_max_par(200, Rmp, 0, 1.26, 0.09, 8.003627381, 24);

//	double Vr[4] = { 0.08, 0.095, 0.11, 0.13}, bmax[4] = { 0, 1.3, 1.4, 0 };
//	k_A_BC_QCT(1500, 0, 0, 0.263892039, Vr, bmax, 4, 24);
	
	//for(int j=0; j<5; j++)
	//	x[j] = myrand();
	//x[5] = 1.;
	//traject_A_BC_print(x, Rmp, 0., 8.003627381, 0.1, 0, 0.05, 300, 1e-8);



	deinit_U();

//	k_A_BC_QCT(10000, 0, gv, 25, Etr, 20, 24);
//	k_A_BC_QCT(10000, 1, gv1, 26, Etr, 20, 24);
//	k_A_BC_QCT(10000, 2, gv2, 27, Etr, 20, 24);
//	k_A_BC_QCT(10000, 3, gv3, 29, Etr, 20, 24);
//	k_A_BC_QCT(10000, 4, gv4, 30, Etr, 20, 32);
//	k_A_BC_QCT(10000, 5, gv5, 28, Etr, 20, 32);



	return 0;
}